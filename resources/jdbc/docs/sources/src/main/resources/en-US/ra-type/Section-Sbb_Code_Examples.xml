<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>

	<para>The following code examples shows how to use the Resource Adaptor Type for common functionalities.</para>
	
	<section id="ratype_sbb_code_examples_retrieving_the_ra_interface_and_factory">

		<title>Retrieving the RA Interface and ACI Factory</title>

		<para>The following code examples the retrieval of the RA's SBB Interface and ACI Factory, usually done in the Sbb's <literal>setSbbContext(SbbContext)</literal>:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[
		/**
	 * the SBB object context
	 */
	private SbbContextExt contextExt;

	/**
	 * the JDBC RA SBB Interface
	 */
	private JdbcResourceAdaptorSbbInterface jdbcRA;

	/**
	 * the JDBC RA {@link ActivityContextInterface} factory
	 */
	private JdbcActivityContextInterfaceFactory jdbcACIF;

	@Override
	public void setSbbContext(SbbContext context) {
		this.contextExt = (SbbContextExt) context;
		this.jdbcRA = (JdbcResourceAdaptorSbbInterface) contextExt
				.getResourceAdaptorInterface(
						JdbcResourceAdaptorSbbInterface.RATYPE_ID, raEntityLinkName);
		this.jdbcACIF = (JdbcActivityContextInterfaceFactory) contextExt
				.getActivityContextInterfaceFactory(JdbcActivityContextInterfaceFactory.RATYPE_ID);
	}]]>
		</programlisting>
		
		<para>The <literal>raEntityLinkName</literal> is the link name of the RA entity to use. The link to the default RA entity, use the link name <literal>JDBCRA</literal>.</para>
		
	</section>

	<section id="ratype_sbb_code_examples_create_and_attach_to_activity">

		<title>Create and Attach to RA Activities</title>

		<para>The following code examples the creation of <literal>JdbcActivity</literal>, and the attachment to its <literal>ActivityContextInterface</literal>:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[
		// create activity using the RA sbb interface
		JdbcActivity jdbcActivity = jdbcRA.createActivity();
		// get its aci from the RA ACI factory
		ActivityContextInterface jdbcACI = jdbcACIF
				.getActivityContextInterface(jdbcActivity);
		// attach the sbb entity
		jdbcACI.attach(contextExt.getSbbLocalObject());]]>
		</programlisting>
		
	</section>
	
	<section id="ratype_sbb_code_examples_execute_a_task">

		<title>Execute a Task</title>

		<para>The following code examples the creation of a concrete <literal>SimpleJdbcTask</literal> implementation and the request for its execution on a <literal>JdbcActivity</literal>:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[
		// build task
		SimpleJdbcTask task = new SimpleJdbcTask() {
			@Override
			public Object executeSimple(JdbcTaskContext context) {
				try {
					Connection connection = context.getConnection();
					PreparedStatement preparedStatement = connection
							.prepareStatement("INSERT INTO TestTable VALUES(?)");
					preparedStatement.setString(1, "Restcomm");
					return true;
				} catch (Exception e) {
					tracer.severe("faile to execute task", e);
					return false;
				}
			}
		};
		// execute the task on the jdbc activity 
		jdbcActivity.execute(task);]]>
		</programlisting>
		
	</section>
	
	<section id="ratype_sbb_code_examples_handle_event_and_end_activity">

		<title>Handling Events and Ending an Activity </title>

		<para>The following code examples the handling of the simple task result event, following the service logic execution. It also shows the explicit ending of the activity:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[		
	public void onSimpleJdbcTaskResultEvent(SimpleJdbcTaskResultEvent event,
			ActivityContextInterface aci) {
		tracer.info("Received a SimpleJdbcTaskResultEvent, task = "
				+ event.getTask() + ", result object = " + event.getResult());
		((JdbcActivity) aci.getActivity()).endActivity();
	}]]>
		</programlisting>
		
		<para>The SBB XML descriptor code to declare the handling of such event:</para>
		
		<programlisting language="XML" role="XML"><![CDATA[
		<event event-direction="Receive" initial-event="False">
			<event-name>SimpleJdbcTaskResultEvent</event-name>
			<event-type-ref>
				<event-type-name>SimpleJdbcTaskResultEvent</event-type-name>
				<event-type-vendor>org.restcomm</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>]]>
	</programlisting>
	
	</section>
		
</section>